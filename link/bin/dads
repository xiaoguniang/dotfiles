#!/bin/sh

CODE_DIR="$HOME/FreeWheel"
IMAGE_NAME="registry.docker.dev.fwmrm.net/ads/ads-regression:latest"
CONTAINER_NAME="regression_hbliu"
CONTAINER_EXTRA="regression_hbliu_extra"

is_osx() {
	[[ "$OSTYPE" =~ ^darwin ]] || return 1
}

if ! is_osx; then
	SUDO="sudo"
	CODE_DIR="$HOME/FreeWheel"
fi

VOLUMN_MAP=" \
	-v $CODE_DIR:/code/ -v $HOME/docker/:/data \
	-v $HOME/.dotfiles/private/docker:/hbliu \
	-v $HOME/.dotfiles/link/.zgen/robbyrussell/oh-my-zsh-master:/.oh-my-zsh \
	"

EXTRA_PORT_MAP=" \
	-p 3306 -p 22 -p 8999 -p 9000 -p 9001 \
    -p 9092 -p 2181
	"

DEFAULT_PORT_MAP=" \
	-p 23306:3306 -p 28999:8999 -p 20022:22 \
	-p 29000:9000 -p 29001:9001 -p 29002:9002 \
    -p 29092:9092 -p 22181:2181
	"

startDocker() {
	if [[ -z "$container_name" ]]; then
		return 1
	fi

    if [[ ! "$(pgrep -f docker)" ]]; then
        $SUDO service docker start
    fi

    $SUDO docker start $container_name
}

createShell() {
	$SUDO docker exec -it $container_name zsh
}

createOrStartDocker() {
	if [[ -z "$container_name" || -z "$port_map" ]]; then
		return 1
	fi

	if createShell 2> /dev/zero; then
		return 0
	fi

	if !($SUDO docker ps -a | grep "\<$container_name\>" &> /dev/zero); then
		if ! $SUDO docker run -d --name=$container_name --privileged $port_map -ti $VOLUMN_MAP $IMAGE_NAME /entry.sh; then
			return 2
		else
			$SUDO docker exec $container_name bash -c "sh /hbliu/setup"
		fi
	elif !($SUDO docker ps | grep "\<$container_name\>" &> /dev/zero); then
		startDocker
	fi

	createShell
}

usage() {
cat << EOF
Usage: $(basename $0) command

Options:
  -h		show this help
  p|port	show container port map
  ip)		show container ip address
  
EOF
exit 0
}

main() {
	RUN_CONTAINER_NAME=$CONTAINER_NAME
	RUN_PORT_MAP=$DEFAULT_PORT_MAP

	case $1 in
		-h|--help)
			usage
			;;
		remove|rm)
			if [[ -n "$2" ]]; then
				RUN_CONTAINER_NAME=${CONTAINER_NAME}_$2
			fi
			$SUDO docker stop $RUN_CONTAINER_NAME
			$SUDO docker rm $RUN_CONTAINER_NAME
			exit ;;
		port|p)
			docker ps --format='{{.Names}}\t{{.Ports}}' | grep "$CONTAINER_NAME"
			exit 0
			;;
		ip)
			docker ps | grep "${CONTAINER_NAME}" | cut -d' ' -f1 | xargs docker inspect --format '{{ .Name }} , {{  .NetworkSettings.IPAddress }} '
			exit 0
			;;
		* )
			if [[ -n "$1" ]]; then
				RUN_CONTAINER_NAME=${CONTAINER_NAME}_$1
				RUN_PORT_MAP=$EXTRA_PORT_MAP
			fi
			;;
	esac

	container_name=$RUN_CONTAINER_NAME port_map=$RUN_PORT_MAP createOrStartDocker
}

main $@
