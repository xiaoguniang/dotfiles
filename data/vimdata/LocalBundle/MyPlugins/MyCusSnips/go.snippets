snippet go "Description" b
package main

endsnippet

snippet defer "defer function" b
defer func() {
	$0
}()
endsnippet

snippet init "package init function" b
func init() {
	$0
}
endsnippet

snippet test "Description" b
import "testing"
import "github.com/stretchr/testify/assert"
endsnippet

snippet tfun "Description" b
func Test${1:name}(t *testing.T) {
	${2:body}
}
endsnippet

snippet hello "go hello world" b
package main

import "fmt"

func main() {
	fmt.Println("hello")
}
endsnippet

snippet isfileexist "check whether file exist" b
if _, err := os.Stat("/path/to/whatever"); os.IsNotExist(err) {
	// path/to/whatever does not exist
}
endsnippet

snippet httpget "http get request" b
res, err := http.Get(fmt.Sprintf("http://localhost:8055/getcert?serial=%s&cn=%s", serialNumber, commonName))
if err != nil {
	fmt.Printf("Send get request error: %s\n", err)
}

cert, err := ioutil.ReadAll(res.Body)
res.Body.Close()
endsnippet

snippet getcurdir "get current diretory" b
func getCurrentDir() string {
	_, filename, _, _ := runtime.Caller(0)
	return filepath.Dir(filename)
}
endsnippet

snippet http "http server" b
func hello(w http.ResponseWriter, r *http.Request) {
	// userName : r.URL.Query().Get("name") // get the first value
	io.WriteString(w, "Hello world!")
}

func main() {
	http.HandleFunc("/", hello)
	http.ListenAndServe(":8000", nil)
}
endsnippet
