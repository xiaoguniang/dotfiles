snippet go "Description" b
package main

endsnippet

snippet append "Slice Append"
${1:slice} = append($1, ${2:element})
endsnippet

snippet tojson "convert struct to json" b
jsonReq, _ := json.Marshal(${1:request})
fmt.Print(string(jsonReq))
endsnippet

# https://golang.org/pkg/regexp/syntax/
snippet regex "go regex" b
re := regexp.MustCompile(`((?im)^[a-zA-Z]{2,4})-?[0-9]+`)
transactionID := re.FindString(inputStr)
endsnippet

snippet getenv "Get System Environment" b
os.Getenv("${1:HOME}")
endsnippet

snippet defer "defer function" b
defer func() {
	$0
}()
endsnippet

snippet init "package init function" b
func init() {
	$0
}
endsnippet

snippet test "Description" b
import "testing"
import "github.com/stretchr/testify/assert"
endsnippet

snippet tfun "Description" b
func Test${1:name}(t *testing.T) {
	${2:body}
}
endsnippet

snippet hello "go hello world" b
package main

import "fmt"

func main() {
	fmt.Println("hello")
}
endsnippet

snippet isfileexist "check whether file exist" b
if _, err := os.Stat("/path/to/whatever"); os.IsNotExist(err) {
	// path/to/whatever does not exist
}
endsnippet

snippet stof "convert string to float" b
${2:f}, _ := strconv.ParseFloat(${1:str}, 64)
endsnippet

snippet slice "define slice" b
${2:arr} := []${1:int} {}
endsnippet

snippet makemap "create new map" b
cusMap := make(map[${1:int}]${2:string})
endsnippet

snippet log "set log level" b
import (
	log "github.com/sirupsen/logrus"
)

log.Debug("Test")
log.SetLevel(DebugLevel)
endsnippet

snippet config "go config" b
import (
	"github.com/spf13/viper"
)

func initConfig() {
	viper.SetConfigName("config")
	viper.AddConfigPath(".")
	viper.SetConfigType("yaml")

	err := viper.ReadInConfig()
	if err != nil {
		log.Fatalln("Fail to read config file")
	}

	host := viper.GetString("db.host")
}
endsnippet

snippet infun "inside function" b
    foo := func(s string) {
        fmt.Println(s)
    }
endsnippet

snippet strfile "read file as string" b
content, err := ioutil.ReadFile(viper.GetString("test.csvfile"))
if err != nil {
	log.Fatalf("Fail to open test file errmsg: %s\n", err)
}
endsnippet

snippet strip "string strip" b
${1:s} := strings.Replace($1, "%", "", -1)
endsnippet

snippet getbody "get http body" b
bodyBytes, err := ioutil.ReadAll(res.Body)
res.Body.Close()
endsnippet

snippet httppost "Http Post Request" b
resp, err := http.Post(postUrl, "text/plain", bytes.NewBuffer([]byte(errStr)))
endsnippet

snippet httpget "http get request" b
resp, err := http.Get(fmt.Sprintf("http://localhost:8055/getcert?serial=%s&cn=%s", serialNumber, commonName))
if err != nil {
	fmt.Printf("Send get request error: %s\n", err)
}

bodyBytes, err := ioutil.ReadAll(resp.Body)
resp.Body.Close()
endsnippet

snippet join "string join" b
strings.Join(${1:slice}, ${2:","})
endsnippet

snippet getcurdir "get current diretory" b
func getCurrentDir() string {
	_, filename, _, _ := runtime.Caller(0)
	return filepath.Dir(filename)
}
endsnippet

snippet strtotime "convert string to go time" b
str := "2017-12-12T00:00:00.000Z"
t, _ := time.Parse(time.RFC3339, str)
endsnippet

snippet timeformat "format print time" b
str := time.Now().UTC().Format(time.RFC3339)
endsnippet

snippet timestamp2time "unix seconds to go time" b
goTime := time.Unix(timestamp, 0)
endsnippet

snippet template "go template"
template, err := template.New("SlackMsgTemplate").Parse("{{.Content}} is here")
if err != nil {
	fmt.Printf("Get slack message error: %s\n", err)
		return ""
}

var buf bytes.Buffer
if err = template.Execute(&buf, content); err != nil {
	fmt.Printf("Create template error: %s\n", err)
		return ""
}

return buf.String()
endsnippet

snippet getpara "get parameter from url"
userName := r.URL.Query().Get("name")
endsnippet

snippet atoi "convert to int" b
value, err := strconv.Atoi(str)
endsnippet

snippet atoi64 "convert string to int64" b
${2:num}, err := strconv.ParseInt(${1:s}, 10, 64)
endsnippet

snippet respwrite "http response write" b
io.WriteString(w, "Hello world!")
endsnippet

snippet server "http server" b
func hello(w http.ResponseWriter, r *http.Request) {
	// userName := r.URL.Query().Get("name") // get the first value
	io.WriteString(w, "Hello world!")
}

func main() {
	http.HandleFunc("/", hello)
	http.ListenAndServe(":8000", nil)
}
endsnippet
